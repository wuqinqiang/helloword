// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/wuqinqiang/helloword/dao/model"
)

func newWrod(db *gorm.DB, opts ...gen.DOOption) wrod {
	_wrod := wrod{}

	_wrod.wrodDo.UseDB(db, opts...)
	_wrod.wrodDo.UseModel(&model.Wrod{})

	tableName := _wrod.wrodDo.TableName()
	_wrod.ALL = field.NewAsterisk(tableName)
	_wrod.WordID = field.NewString(tableName, "word_id")
	_wrod.Word = field.NewString(tableName, "word")
	_wrod.Phonetic = field.NewString(tableName, "phonetic")
	_wrod.Definition = field.NewString(tableName, "definition")
	_wrod.Difficulty = field.NewString(tableName, "difficulty")
	_wrod.CreateTime = field.NewInt64(tableName, "create_time")
	_wrod.UpdateTime = field.NewInt64(tableName, "update_time")

	_wrod.fillFieldMap()

	return _wrod
}

type wrod struct {
	wrodDo wrodDo

	ALL        field.Asterisk
	WordID     field.String
	Word       field.String
	Phonetic   field.String
	Definition field.String
	Difficulty field.String
	CreateTime field.Int64
	UpdateTime field.Int64

	fieldMap map[string]field.Expr
}

func (w wrod) Table(newTableName string) *wrod {
	w.wrodDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wrod) As(alias string) *wrod {
	w.wrodDo.DO = *(w.wrodDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wrod) updateTableName(table string) *wrod {
	w.ALL = field.NewAsterisk(table)
	w.WordID = field.NewString(table, "word_id")
	w.Word = field.NewString(table, "word")
	w.Phonetic = field.NewString(table, "phonetic")
	w.Definition = field.NewString(table, "definition")
	w.Difficulty = field.NewString(table, "difficulty")
	w.CreateTime = field.NewInt64(table, "create_time")
	w.UpdateTime = field.NewInt64(table, "update_time")

	w.fillFieldMap()

	return w
}

func (w *wrod) WithContext(ctx context.Context) *wrodDo { return w.wrodDo.WithContext(ctx) }

func (w wrod) TableName() string { return w.wrodDo.TableName() }

func (w wrod) Alias() string { return w.wrodDo.Alias() }

func (w *wrod) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wrod) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 7)
	w.fieldMap["word_id"] = w.WordID
	w.fieldMap["word"] = w.Word
	w.fieldMap["phonetic"] = w.Phonetic
	w.fieldMap["definition"] = w.Definition
	w.fieldMap["difficulty"] = w.Difficulty
	w.fieldMap["create_time"] = w.CreateTime
	w.fieldMap["update_time"] = w.UpdateTime
}

func (w wrod) clone(db *gorm.DB) wrod {
	w.wrodDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wrod) replaceDB(db *gorm.DB) wrod {
	w.wrodDo.ReplaceDB(db)
	return w
}

type wrodDo struct{ gen.DO }

func (w wrodDo) Debug() *wrodDo {
	return w.withDO(w.DO.Debug())
}

func (w wrodDo) WithContext(ctx context.Context) *wrodDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wrodDo) ReadDB() *wrodDo {
	return w.Clauses(dbresolver.Read)
}

func (w wrodDo) WriteDB() *wrodDo {
	return w.Clauses(dbresolver.Write)
}

func (w wrodDo) Session(config *gorm.Session) *wrodDo {
	return w.withDO(w.DO.Session(config))
}

func (w wrodDo) Clauses(conds ...clause.Expression) *wrodDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wrodDo) Returning(value interface{}, columns ...string) *wrodDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wrodDo) Not(conds ...gen.Condition) *wrodDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wrodDo) Or(conds ...gen.Condition) *wrodDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wrodDo) Select(conds ...field.Expr) *wrodDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wrodDo) Where(conds ...gen.Condition) *wrodDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wrodDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *wrodDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w wrodDo) Order(conds ...field.Expr) *wrodDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wrodDo) Distinct(cols ...field.Expr) *wrodDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wrodDo) Omit(cols ...field.Expr) *wrodDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wrodDo) Join(table schema.Tabler, on ...field.Expr) *wrodDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wrodDo) LeftJoin(table schema.Tabler, on ...field.Expr) *wrodDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wrodDo) RightJoin(table schema.Tabler, on ...field.Expr) *wrodDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wrodDo) Group(cols ...field.Expr) *wrodDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wrodDo) Having(conds ...gen.Condition) *wrodDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wrodDo) Limit(limit int) *wrodDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wrodDo) Offset(offset int) *wrodDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wrodDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *wrodDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wrodDo) Unscoped() *wrodDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wrodDo) Create(values ...*model.Wrod) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wrodDo) CreateInBatches(values []*model.Wrod, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wrodDo) Save(values ...*model.Wrod) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wrodDo) First() (*model.Wrod, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Wrod), nil
	}
}

func (w wrodDo) Take() (*model.Wrod, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Wrod), nil
	}
}

func (w wrodDo) Last() (*model.Wrod, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Wrod), nil
	}
}

func (w wrodDo) Find() ([]*model.Wrod, error) {
	result, err := w.DO.Find()
	return result.([]*model.Wrod), err
}

func (w wrodDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Wrod, err error) {
	buf := make([]*model.Wrod, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wrodDo) FindInBatches(result *[]*model.Wrod, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wrodDo) Attrs(attrs ...field.AssignExpr) *wrodDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wrodDo) Assign(attrs ...field.AssignExpr) *wrodDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wrodDo) Joins(fields ...field.RelationField) *wrodDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wrodDo) Preload(fields ...field.RelationField) *wrodDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wrodDo) FirstOrInit() (*model.Wrod, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Wrod), nil
	}
}

func (w wrodDo) FirstOrCreate() (*model.Wrod, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Wrod), nil
	}
}

func (w wrodDo) FindByPage(offset int, limit int) (result []*model.Wrod, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wrodDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wrodDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wrodDo) Delete(models ...*model.Wrod) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wrodDo) withDO(do gen.Dao) *wrodDo {
	w.DO = *do.(*gen.DO)
	return w
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/wuqinqiang/helloword/dao/model"
)

func newWordPhrase(db *gorm.DB, opts ...gen.DOOption) wordPhrase {
	_wordPhrase := wordPhrase{}

	_wordPhrase.wordPhraseDo.UseDB(db, opts...)
	_wordPhrase.wordPhraseDo.UseModel(&model.WordPhrase{})

	tableName := _wordPhrase.wordPhraseDo.TableName()
	_wordPhrase.ALL = field.NewAsterisk(tableName)
	_wordPhrase.WordPhraseID = field.NewString(tableName, "word_phrase_id")
	_wordPhrase.PhraseID = field.NewString(tableName, "phrase_id")
	_wordPhrase.CreateTime = field.NewInt64(tableName, "create_time")
	_wordPhrase.UpdateTime = field.NewInt64(tableName, "update_time")

	_wordPhrase.fillFieldMap()

	return _wordPhrase
}

type wordPhrase struct {
	wordPhraseDo wordPhraseDo

	ALL          field.Asterisk
	WordPhraseID field.String
	PhraseID     field.String
	CreateTime   field.Int64
	UpdateTime   field.Int64

	fieldMap map[string]field.Expr
}

func (w wordPhrase) Table(newTableName string) *wordPhrase {
	w.wordPhraseDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wordPhrase) As(alias string) *wordPhrase {
	w.wordPhraseDo.DO = *(w.wordPhraseDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wordPhrase) updateTableName(table string) *wordPhrase {
	w.ALL = field.NewAsterisk(table)
	w.WordPhraseID = field.NewString(table, "word_phrase_id")
	w.PhraseID = field.NewString(table, "phrase_id")
	w.CreateTime = field.NewInt64(table, "create_time")
	w.UpdateTime = field.NewInt64(table, "update_time")

	w.fillFieldMap()

	return w
}

func (w *wordPhrase) WithContext(ctx context.Context) *wordPhraseDo {
	return w.wordPhraseDo.WithContext(ctx)
}

func (w wordPhrase) TableName() string { return w.wordPhraseDo.TableName() }

func (w wordPhrase) Alias() string { return w.wordPhraseDo.Alias() }

func (w *wordPhrase) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wordPhrase) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 4)
	w.fieldMap["word_phrase_id"] = w.WordPhraseID
	w.fieldMap["phrase_id"] = w.PhraseID
	w.fieldMap["create_time"] = w.CreateTime
	w.fieldMap["update_time"] = w.UpdateTime
}

func (w wordPhrase) clone(db *gorm.DB) wordPhrase {
	w.wordPhraseDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wordPhrase) replaceDB(db *gorm.DB) wordPhrase {
	w.wordPhraseDo.ReplaceDB(db)
	return w
}

type wordPhraseDo struct{ gen.DO }

func (w wordPhraseDo) Debug() *wordPhraseDo {
	return w.withDO(w.DO.Debug())
}

func (w wordPhraseDo) WithContext(ctx context.Context) *wordPhraseDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wordPhraseDo) ReadDB() *wordPhraseDo {
	return w.Clauses(dbresolver.Read)
}

func (w wordPhraseDo) WriteDB() *wordPhraseDo {
	return w.Clauses(dbresolver.Write)
}

func (w wordPhraseDo) Session(config *gorm.Session) *wordPhraseDo {
	return w.withDO(w.DO.Session(config))
}

func (w wordPhraseDo) Clauses(conds ...clause.Expression) *wordPhraseDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wordPhraseDo) Returning(value interface{}, columns ...string) *wordPhraseDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wordPhraseDo) Not(conds ...gen.Condition) *wordPhraseDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wordPhraseDo) Or(conds ...gen.Condition) *wordPhraseDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wordPhraseDo) Select(conds ...field.Expr) *wordPhraseDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wordPhraseDo) Where(conds ...gen.Condition) *wordPhraseDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wordPhraseDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *wordPhraseDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w wordPhraseDo) Order(conds ...field.Expr) *wordPhraseDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wordPhraseDo) Distinct(cols ...field.Expr) *wordPhraseDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wordPhraseDo) Omit(cols ...field.Expr) *wordPhraseDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wordPhraseDo) Join(table schema.Tabler, on ...field.Expr) *wordPhraseDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wordPhraseDo) LeftJoin(table schema.Tabler, on ...field.Expr) *wordPhraseDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wordPhraseDo) RightJoin(table schema.Tabler, on ...field.Expr) *wordPhraseDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wordPhraseDo) Group(cols ...field.Expr) *wordPhraseDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wordPhraseDo) Having(conds ...gen.Condition) *wordPhraseDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wordPhraseDo) Limit(limit int) *wordPhraseDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wordPhraseDo) Offset(offset int) *wordPhraseDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wordPhraseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *wordPhraseDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wordPhraseDo) Unscoped() *wordPhraseDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wordPhraseDo) Create(values ...*model.WordPhrase) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wordPhraseDo) CreateInBatches(values []*model.WordPhrase, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wordPhraseDo) Save(values ...*model.WordPhrase) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wordPhraseDo) First() (*model.WordPhrase, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WordPhrase), nil
	}
}

func (w wordPhraseDo) Take() (*model.WordPhrase, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WordPhrase), nil
	}
}

func (w wordPhraseDo) Last() (*model.WordPhrase, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WordPhrase), nil
	}
}

func (w wordPhraseDo) Find() ([]*model.WordPhrase, error) {
	result, err := w.DO.Find()
	return result.([]*model.WordPhrase), err
}

func (w wordPhraseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WordPhrase, err error) {
	buf := make([]*model.WordPhrase, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wordPhraseDo) FindInBatches(result *[]*model.WordPhrase, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wordPhraseDo) Attrs(attrs ...field.AssignExpr) *wordPhraseDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wordPhraseDo) Assign(attrs ...field.AssignExpr) *wordPhraseDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wordPhraseDo) Joins(fields ...field.RelationField) *wordPhraseDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wordPhraseDo) Preload(fields ...field.RelationField) *wordPhraseDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wordPhraseDo) FirstOrInit() (*model.WordPhrase, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WordPhrase), nil
	}
}

func (w wordPhraseDo) FirstOrCreate() (*model.WordPhrase, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WordPhrase), nil
	}
}

func (w wordPhraseDo) FindByPage(offset int, limit int) (result []*model.WordPhrase, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wordPhraseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wordPhraseDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wordPhraseDo) Delete(models ...*model.WordPhrase) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wordPhraseDo) withDO(do gen.Dao) *wordPhraseDo {
	w.DO = *do.(*gen.DO)
	return w
}
